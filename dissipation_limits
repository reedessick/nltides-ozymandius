#!/usr/bin/env python

__usage__ = "dissipation_limits [--options] samples.hdf5 [samples.hdf5 samples.hdf5 ...]"
__doc__ = "an executable that computes things"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from optparse import OptionParser

### non-standard libraries
from sddr import utils

#-------------------------------------------------

G = 6.674e-8 ### cgs
Msun = 1.989e33 ### cgs
c = 299792458*100 ### cgs


#-------------------------------------------------

def chirpmassq2m1m2(mc, q):
    m1 = mc*(1+q)**0.2/q**0.6
    m2 = q*m1
    return m1, m2

def fisco(m1, m2):
    """
    the isco GW frequency for a schwartzschild BH with M=m1+m2
    """
    mtot = (m1+m2)*Msun
    return c**3/(np.pi*6**(1.5)*mtot*G)

def freqrange(m1, m2, f0, dfdm):
    """
    figure out the relevant frequency range for these samples
    """
    f1 = f0 + dfdm*(m1-1.4)
    f2 = f0 + dfdm*(m2-1.4)

    fmin = min(min(f1), min(f2))
    fmax = max(fisco(m1, m2))

    return fmin, fmax

def dEdf(freq, m1, m2, log10A0, dlogAdm, f0, dfdm, n0, dndm, fref=100):
    """
    compute the curve representing the total energy dissipated in the non-linear tide while the orbit is within (freq, freq+dfreq)
    """
    x = freq/fref
    A1, F1, N1 = params(m1, log10A0, dlogAdm, f0, dfdm, n0, dndm)
    A2, F2, N2 = params(m2, log10A0, dlogAdm, f0, dfdm, n0, dndm)
    fmax = fisco(m1, m2)

    m1 *= Msun
    m2 *= Msun

    mtot = m1 + m2
    mchirp = (m1*m2)**(0.6)/mtot**0.2

    C1 = ((2*m1)/(mtot))**(2./3)*A1
    C2 = ((2*m2)/(mtot))**(2./3)*A2

    B = (32./5)*(G*mchirp*np.pi*fref/c**3)**(5./3)

    t1 = (F1<=freq)*(freq<=fmax)
    t2 = (F2<=freq)*(freq<=fmax)

    dtdf = x**(-7./3)/(B*x**(4./3) + C1*t1*x**N1 + C2*t2*x**N2) * (3*np.pi*fref**2)**-1
    dE1 = (2*G*m1)**(2./3)*m1*m2/(mtot) * (np.pi*fref)**(5./3) * A1 * x**(2+N1) * t1
    dE2 = (2*G*m2)**(2./3)*m1*m2/(mtot) * (np.pi*fref)**(5./3) * A2 * x**(2+N2) * t2

    dEgr = (32. * np.pi**(10./3) / 5) * (G**(7./3) * mchirp**(10./3) / c**5) * freq**(10./3)

    return dtdf*(dE1+dE2), dtdf*dEgr

def params(m, log10A0, dlogAdm, f0, dfdm, n0, dndm):
    dm = m-1.4

    A = 10**(log10A0)
    A += A*dm*dlogAdm
    F = f0 + dm*dfdm
    N = n0 + dm*dndm

    return A, F, N

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--initial-burnin', default=utils.DEFAULT_INITIAL_BURNIN, type='int',
    help='force the code to skip the first --initial-burnin samples, and then proceed with --deltaLogP logic. \
DEFAULT=%d'%utils.DEFAULT_INITIAL_BURNIN)
parser.add_option('', '--deltaLogP', default=utils.DEFAULT_DELTALOGP, type='float',
    help='used when stripping burn-in from hdf5 files')
parser.add_option('', '--downsample', default=utils.DEFAULT_DOWNSAMPLE, type='int',
    help='only retain 1 out of every --downsample samples after stripping burn-in. Used when reading both file types')

parser.add_option('', '--upper', default=[], type='float', action='append',
    help='confidence levels for upper limits. e.g.: `--upper 0.9`. Can be repeated')

parser.add_option('', '--num-integration-points', default=10000, type='int',
    help='the number of points used when approximating the integral of total energy dissipated. \
DEFAULT=10000')

parser.add_option('', '--process-alpha', default=0.1, type='float',
    help='DEFAULT=0.1')
parser.add_option('', '--plot-fmin', default=30, type='float')
parser.add_option('', '--plot-fmax', default=2000, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')
parser.add_option('', '--figtype', default=[], type='string')

opts, args = parser.parse_args()
assert args, 'please supply at least 1 input argument\n%s'%__usage__

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

opts.verbose |= opts.Verbose

if opts.tag:
    opts.tag = "_"+opts.tag

if not opts.figtype:
    opts.figtype.append('png')

#-------------------------------------------------

### read in samples for all parameters
samples = utils.load(args, field=None, deltaLogP=opts.deltaLogP, downsample=opts.downsample, initial_burnin=opts.initial_burnin, verbose=opts.verbose)

M1, M2 = chirpmassq2m1m2(samples['chirpmass'], samples['q'])

#-------------------------------------------------

### generate limits
# figure out relevant range for frequency
if opts.verbose:
    print('figuring out a relevant frequency range')
fmin, fmax = freqrange(M1, M2, samples['NLTides_F0'], samples['NLTides_dFdm'])
freq = np.linspace(min(fmin, opts.plot_fmin), max(fmax, opts.plot_fmax), opts.num_integration_points)

# generate a curve for each sample
if opts.verbose:
    print('iterating over samples to calculate dissipation for each. This may be expensive...')
fig = plt.figure()
ax = fig.gca()

Enl = []
Egr = []
Nsamp = len(M1)
for ind, (m1, m2, log10A0, dlogAdm, f0, dfdm, n0, dndm) in enumerate(zip(M1, M2, samples['log10NLTides_A0'], samples['NLTides_dlogAdm'], samples['NLTides_F0'], samples['NLTides_dFdm'], samples['NLTides_N0'], samples['NLTides_dNdm'])):
    if opts.Verbose:
        print('%d/%d'%(ind, Nsamp))
    # explicitly skip NANs because FUCK LALINFERENCE
    args = np.array([m1, m2, log10A0, dlogAdm, f0, dfdm, n0, dndm])
    if np.any(args!=args):
        if opts.Verbose:
            print('skipping sample because we found a nan!')
        continue ### just skip the sample
    # skip non-physical samples because FUCK LALINFERENCE
    if (m1<0) or (m2<0) or (f0<0):
        if opts.Verbose:
            print('skipping sample because of non-physical values')
        continue

    nl, gr = dEdf(freq, m1, m2, log10A0, dlogAdm, f0, dfdm, n0, dndm)

    ### plot curve
    ax.plot(freq, nl, color='b', alpha=opts.process_alpha)
    ax.plot(freq, gr, color='r', alpha=opts.process_alpha)

    ### estimate total energy dissipated
    integral = np.trapz(nl, freq)
    if integral!=integral: ### nan
        raise ValueError('found a nan')
    Enl.append( integral )

    integral = np.trapz(gr, freq)
    if integral!=integral: ### nan
        raise ValueError('found a nan')
    Egr.append( integral )

# wrap up plotting for process
ax.set_xlabel('$f$ [Hz]')
ax.set_ylabel('$\\frac{dt}{df} \dot{E}_\mathrm{NL}(f)$ [erg/Hz]')

ax.set_xscale('log')
ax.set_yscale('log')

ax.set_xlim(xmin=opts.plot_fmin, xmax=opts.plot_fmax)

ax.grid(True, which='both')

for figtype in opts.figtype:
    figname = '%s/dissipation_limits-process%s.%s'%(opts.output_dir, opts.tag, figtype)
    if opts.verbose:
        print('saving: '+figname)
    fig.savefig(figname)
plt.close(fig)

### generate plot for total energy dissipated
fig = plt.figure()
ax = fig.gca()

bins = np.logspace(np.log10(np.min(Enl)), np.log10(np.max(Enl)), int(len(Enl)**0.5))
ax.hist(Enl, bins=bins, histtype='step') #, normed=True, weights=np.max(Enl)*np.ones_like(Enl, dtype=float)/len(Enl), label='NL')

ax.plot([np.median(Egr)]*2, ax.get_ylim(), 'r')
#bins = np.logspace(np.log10(np.min(Egr)), np.log10(np.max(Egr)), int(len(Egr)**0.5))
#ax.hist(Egr, bins=bins, histtype='step') #, normed=True, weights=np.max(Egr)*np.ones_like(Egr, dtype=float)/len(Egr), label='GR')
#ax.hist(Egr, histtype='step')

# decorate
ax.set_xlabel('$\int dt \dot{E}$ [erg]')
plt.setp(ax.get_yticklabels(), visible=False)

ax.set_xscale('log')
ax.grid(True, which='both')

ax.set_xlim(xmax=max(1.1*np.median(Egr), ax.get_xlim()[1]))

for figtype in opts.figtype:
    figname = '%s/dissipation_limits-total%s.%s'%(opts.output_dir, opts.tag, figtype)
    if opts.verbose:
        print('saving: '+figname)
    fig.savefig(figname)
plt.close(fig)

### report the upper bounds on Enl
for upper in opts.upper:
    upper *= 100
    print('Enl <= %.6e erg @ %.3f confidence'%(np.percentile(Enl, upper), upper))
    print('Egr <= %.6e erg @ %.3f confidence'%(np.percentile(Egr, upper), upper))
